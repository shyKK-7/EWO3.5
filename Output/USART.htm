<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\..\Output\USART.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\..\Output\USART.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Sun Sep 07 17:23:24 2025
<BR><P>
<H3>Maximum Stack Usage =       3032 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
IDinandoutTask &rArr; Egg_Queue_Add &rArr; Egg_Queue_Save &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[22]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">ADC_IRQHandler</a><BR>
 <LI><a href="#[8]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">HardFault_Handler</a><BR>
 <LI><a href="#[9]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">MemManage_Handler</a><BR>
 <LI><a href="#[a]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">BusFault_Handler</a><BR>
 <LI><a href="#[b]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[22]">ADC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[a]">BusFault_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[24]">CAN1_RX0_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[25]">CAN1_RX1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[26]">CAN1_SCE_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[23]">CAN1_TX_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[50]">CAN2_RX0_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[51]">CAN2_RX1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[52]">CAN2_SCE_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4f]">CAN2_TX_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5f]">CRYP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5e]">DCMI_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream0_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[1c]">DMA1_Stream1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[1d]">DMA1_Stream2_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[1e]">DMA1_Stream3_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[1f]">DMA1_Stream4_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[20]">DMA1_Stream5_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[21]">DMA1_Stream6_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3f]">DMA1_Stream7_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[48]">DMA2_Stream0_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[49]">DMA2_Stream1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4a]">DMA2_Stream2_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4b]">DMA2_Stream3_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4c]">DMA2_Stream4_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[54]">DMA2_Stream5_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[55]">DMA2_Stream6_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[56]">DMA2_Stream7_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[68]">DatatestTask</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[d]">DebugMon_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4d]">ETH_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4e]">ETH_WKUP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[16]">EXTI0_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[38]">EXTI15_10_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[17]">EXTI1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[18]">EXTI2_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[19]">EXTI3_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[1a]">EXTI4_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[27]">EXTI9_5_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[14]">FLASH_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[61]">FPU_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[40]">FSMC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[60]">HASH_RNG_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[8]">HardFault_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[30]">I2C1_ER_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2f]">I2C1_EV_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[32]">I2C2_ER_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[31]">I2C2_EV_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[59]">I2C3_ER_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[58]">I2C3_EV_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[67]">IDinandoutTask</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[6a]">LoraTask</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[9]">MemManage_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[7]">NMI_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[53]">OTG_FS_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3a]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5b]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5a]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5d]">OTG_HS_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5c]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[11]">PVD_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[9a]">PWM_BACK_Task</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[96]">PWM_START_Task</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[e]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[15]">RCC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[39]">RTC_Alarm_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[13]">RTC_WKUP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[65]">ReadCardTask</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[6]">Reset_Handler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[41]">SDIO_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[33]">SPI1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[34]">SPI2_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[43]">SPI3_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[c]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[69]">ShowTask</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[3]">Step1_Move</a> from step_motor.o(.text) referenced 2 times from step_motor.o(.data)
 <LI><a href="#[2]">Step1_OFF</a> from step_motor.o(.text) referenced 2 times from step_motor.o(.data)
 <LI><a href="#[1]">Step1_ON</a> from step_motor.o(.text) referenced 2 times from step_motor.o(.data)
 <LI><a href="#[f]">SysTick_Handler</a> from port.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[63]">SystemInit</a> from system_stm32f4xx.o(.text) referenced from startup_stm32f40xx.o(.text)
 <LI><a href="#[12]">TAMP_STAMP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[28]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2b]">TIM1_CC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2a]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[29]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2c]">TIM2_IRQHandler</a> from step_motor.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2d]">TIM3_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2e]">TIM4_IRQHandler</a> from stop_key.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[42]">TIM5_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[46]">TIM6_DAC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[47]">TIM7_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3b]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3e]">TIM8_CC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3d]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3c]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[66]">TotalTask</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[44]">UART4_IRQHandler</a> from usart_lcd.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[45]">UART5_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[35]">USART1_IRQHandler</a> from bsp_usart.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[36]">USART2_IRQHandler</a> from rfid_r200.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[37]">USART3_IRQHandler</a> from lora.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[57]">USART6_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[b]">UsageFault_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[10]">WWDG_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[64]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f40xx.o(.text)
 <LI><a href="#[78]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[77]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[7b]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[7c]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[7c]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0vsprintf)
 <LI><a href="#[6f]">alloc_env_cb</a> from ef_env.o(.text) referenced from ef_env.o(.text)
 <LI><a href="#[75]">check_and_recovery_env_cb</a> from ef_env.o(.text) referenced from ef_env.o(.text)
 <LI><a href="#[74]">check_and_recovery_gc_cb</a> from ef_env.o(.text) referenced from ef_env.o(.text)
 <LI><a href="#[73]">check_sec_hdr_cb</a> from ef_env.o(.text) referenced from ef_env.o(.text)
 <LI><a href="#[71]">do_gc</a> from ef_env.o(.text) referenced from ef_env.o(.text)
 <LI><a href="#[76]">find_env_cb</a> from ef_env.o(.text) referenced from ef_env.o(.text)
 <LI><a href="#[7a]">fputc</a> from bsp_usart.o(.text) referenced from printfa.o(i.__0printf)
 <LI><a href="#[5]">free</a> from malloc.o(i.free) referenced 4 times from cjson.o(.data)
 <LI><a href="#[5]">free</a> from malloc.o(i.free) referenced 2 times from cjson.o(.text)
 <LI><a href="#[70]">gc_check_cb</a> from ef_env.o(.text) referenced from ef_env.o(.text)
 <LI><a href="#[79]">isspace</a> from isspace_o.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[62]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[4]">malloc</a> from malloc.o(i.malloc) referenced 4 times from cjson.o(.data)
 <LI><a href="#[4]">malloc</a> from malloc.o(i.malloc) referenced 2 times from cjson.o(.text)
 <LI><a href="#[72]">print_env_cb</a> from ef_env.o(.text) referenced from ef_env.o(.text)
 <LI><a href="#[6b]">prvIdleTask</a> from tasks.o(.text) referenced from tasks.o(.text)
 <LI><a href="#[6d]">prvTaskExitError</a> from port.o(.text) referenced from port.o(.text)
 <LI><a href="#[6c]">prvTimerTask</a> from timers.o(.text) referenced from timers.o(.text)
 <LI><a href="#[6e]">sector_statistics_cb</a> from ef_env.o(.text) referenced from ef_env.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[64]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(.text)
</UL>
<P><STRONG><a name="[2b2]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[7d]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[298]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2b3]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[2b4]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[2b5]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[2b6]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[2b7]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[2b8]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[c]"></a>SVC_Handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1df]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[e]"></a>PendSV_Handler</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; Usart1_Printf &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1e0]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[6]"></a>Reset_Handler</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>SystemInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, system_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(.text)
</UL>
<P><STRONG><a name="[2b9]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, system_stm32f4xx.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = vApplicationStackOverflowHook &rArr; Usart1_Printf &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[87]"></a>IsEmpty</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;De_this_goose_queue
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraverseQueue
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DatatestTask
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDinandoutTask
</UL>

<P><STRONG><a name="[83]"></a>Init_goose_queue</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Init_goose_queue &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[84]"></a>ADD_goose_queue</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ADD_goose_queue &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TotalTask
</UL>

<P><STRONG><a name="[85]"></a>De_goose_queue</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[86]"></a>TraverseQueue</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Printf
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEmpty
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[88]"></a>De_this_goose_queue</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = De_this_goose_queue &rArr; Usart1_Printf &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Printf
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDinandoutTask
</UL>

<P><STRONG><a name="[8d]"></a>IsEggQueueEmpty</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;De_this_egg_queue
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowTask
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DatatestTask
</UL>

<P><STRONG><a name="[89]"></a>Init_egg_queue</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Init_egg_queue &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8a]"></a>ADD_egg_queue</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ADD_egg_queue &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDinandoutTask
</UL>

<P><STRONG><a name="[8b]"></a>De_egg_queue</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[8c]"></a>De_this_egg_queue</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Printf
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEggQueueEmpty
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[8e]"></a>IsGooseInQueue</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = IsGooseInQueue &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TotalTask
</UL>

<P><STRONG><a name="[96]"></a>PWM_START_Task</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = PWM_START_Task &rArr; Usart1_Printf &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Printf
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyRTC_GetUnixTimestamp
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[9a]"></a>PWM_BACK_Task</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = PWM_BACK_Task &rArr; Usart1_Printf &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Printf
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[b5]"></a>AppTaskCreate</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = AppTaskCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[62]"></a>main</STRONG> (Thumb, 326 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2928<LI>Call Chain = main &rArr; Egg_Queue_Init &rArr; Egg_Queue_Load &rArr; SPI_FLASH_BufferRead &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easyflash_init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Printf
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_PWM_Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Key_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Egg_Queue_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCreate
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADD_egg_queue
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_egg_queue
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_goose_queue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[7]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[f6]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Uart_Config
</UL>

<P><STRONG><a name="[f8]"></a>NVIC_Init</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Uart_Config
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Key_TIM_Init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_USART_Config
</UL>

<P><STRONG><a name="[2ba]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[2bb]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[2bc]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>GPIO_DeInit</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphResetCmd
</UL>

<P><STRONG><a name="[f5]"></a>GPIO_Init</STRONG> (Thumb, 162 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_PWM_Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Key_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Uart_Config
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Res_Config
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_USART_Config
</UL>

<P><STRONG><a name="[2bd]"></a>GPIO_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2be]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_BACK_Task
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_START_Task
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Scan
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[2bf]"></a>GPIO_ReadInputData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2c0]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2c1]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[16e]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Init
</UL>

<P><STRONG><a name="[16d]"></a>GPIO_ResetBits</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Init
</UL>

<P><STRONG><a name="[124]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step1_OFF
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step1_ON
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_OFF
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_ON
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_WAKEUP
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_PowerDown
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_StartReadSequence
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadDeviceID
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferRead
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BulkErase
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorErase_NOS
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorErase
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadID
</UL>

<P><STRONG><a name="[2c2]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[2c3]"></a>GPIO_ToggleBits</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[f4]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_PWM_Init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Uart_Config
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_USART_Config
</UL>

<P><STRONG><a name="[c5]"></a>PWR_DeInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f4xx_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[113]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CLK_Config_Backup
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CLK_Config
</UL>

<P><STRONG><a name="[2c4]"></a>PWR_PVDLevelConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[2c5]"></a>PWR_PVDCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[2c6]"></a>PWR_WakeUpPinCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[2c7]"></a>PWR_BackupRegulatorCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[2c8]"></a>PWR_MainRegulatorModeConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[2c9]"></a>PWR_OverDriveCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[2ca]"></a>PWR_OverDriveSWCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[2cb]"></a>PWR_UnderDriveCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[2cc]"></a>PWR_FlashPowerDownCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[2cd]"></a>PWR_EnterSTOPMode</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[2ce]"></a>PWR_EnterUnderDriveSTOPMode</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[2cf]"></a>PWR_EnterSTANDBYMode</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[2d0]"></a>PWR_GetFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[2d1]"></a>PWR_ClearFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[2d2]"></a>RCC_DeInit</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2d3]"></a>RCC_HSEConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[c8]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CLK_Config_Backup
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CLK_Config
</UL>

<P><STRONG><a name="[c7]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[2d4]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2d5]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[114]"></a>RCC_LSEConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CLK_Config_Backup
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CLK_Config
</UL>

<P><STRONG><a name="[118]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CLK_Config_Backup
</UL>

<P><STRONG><a name="[2d6]"></a>RCC_PLLConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2d7]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2d8]"></a>RCC_PLLI2SConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2d9]"></a>RCC_PLLI2SCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2da]"></a>RCC_PLLSAIConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2db]"></a>RCC_PLLSAICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2dc]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2dd]"></a>RCC_MCO1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2de]"></a>RCC_MCO2Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2df]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2e0]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2e1]"></a>RCC_HCLKConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2e2]"></a>RCC_PCLK1Config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2e3]"></a>RCC_PCLK2Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[ee]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[115]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CLK_Config_Backup
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CLK_Config
</UL>

<P><STRONG><a name="[116]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CLK_Config_Backup
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CLK_Config
</UL>

<P><STRONG><a name="[2e4]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2e5]"></a>RCC_I2SCLKConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2e6]"></a>RCC_SAIBlockACLKConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2e7]"></a>RCC_SAIBlockBCLKConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2e8]"></a>RCC_SAIPLLI2SClkDivConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2e9]"></a>RCC_SAIPLLSAIClkDivConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2ea]"></a>RCC_LTDCCLKDivConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2eb]"></a>RCC_TIMCLKPresConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_PWM_Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Key_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Uart_Config
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Res_Config
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_USART_Config
</UL>

<P><STRONG><a name="[2ec]"></a>RCC_AHB2PeriphClockCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2ed]"></a>RCC_AHB3PeriphClockCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[109]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_PWM_Init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Uart_Config
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Key_TIM_Init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CLK_Config_Backup
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CLK_Config
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_USART_Config
</UL>

<P><STRONG><a name="[f2]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Init
</UL>

<P><STRONG><a name="[c4]"></a>RCC_AHB1PeriphResetCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[2ee]"></a>RCC_AHB2PeriphResetCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2ef]"></a>RCC_AHB3PeriphResetCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_DeInit
</UL>

<P><STRONG><a name="[dc]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[2f0]"></a>RCC_AHB1PeriphClockLPModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2f1]"></a>RCC_AHB2PeriphClockLPModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2f2]"></a>RCC_AHB3PeriphClockLPModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2f3]"></a>RCC_APB1PeriphClockLPModeCmd</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2f4]"></a>RCC_APB2PeriphClockLPModeCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2f5]"></a>RCC_LSEModeConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2f6]"></a>RCC_ITConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2f7]"></a>RCC_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2f8]"></a>RCC_GetITStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[2f9]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[cb]"></a>RTC_WaitForSynchro</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f4xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SynchroShiftConfig
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DeInit
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CLK_Config_Backup
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CLK_Config
</UL>

<P><STRONG><a name="[ca]"></a>RTC_EnterInitMode</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CoarseCalibCmd
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CoarseCalibConfig
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_RefClockCmd
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DeInit
</UL>

<P><STRONG><a name="[c9]"></a>RTC_DeInit</STRONG> (Thumb, 168 bytes, Stack size 20 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
</UL>

<P><STRONG><a name="[cd]"></a>RTC_ExitInitMode</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CoarseCalibCmd
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CoarseCalibConfig
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_RefClockCmd
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[cc]"></a>RTC_Init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CLK_Config_Backup
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CLK_Config
</UL>

<P><STRONG><a name="[2fa]"></a>RTC_StructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[2fb]"></a>RTC_WriteProtectionCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>RTC_RefClockCmd</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>

<P><STRONG><a name="[2fc]"></a>RTC_BypassShadowCmd</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[cf]"></a>RTC_SetTime</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, stm32f4xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RTC_SetTime &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timestamp_Set_RTC_Time
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyRTC_SetTime
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeAndDate_Set
</UL>

<P><STRONG><a name="[2fd]"></a>RTC_TimeStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>RTC_GetTime</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyRTC_Lora_GetTime
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyRTC_GetUnixTimestamp
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyRTC_GetTime
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyRTC_GetTimestamp
</UL>

<P><STRONG><a name="[2fe]"></a>RTC_GetSubSecond</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>RTC_SetDate</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RTC_SetDate &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timestamp_Set_RTC_Time
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyRTC_SetTime
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeAndDate_Set
</UL>

<P><STRONG><a name="[2ff]"></a>RTC_DateStructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[d4]"></a>RTC_GetDate</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_GetDate
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyRTC_Lora_GetTime
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyRTC_GetUnixTimestamp
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyRTC_GetTime
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyRTC_GetTimestamp
</UL>

<P><STRONG><a name="[d5]"></a>RTC_SetAlarm</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
</UL>

<P><STRONG><a name="[300]"></a>RTC_AlarmStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>RTC_GetAlarm</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>

<P><STRONG><a name="[301]"></a>RTC_AlarmCmd</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[302]"></a>RTC_AlarmSubSecondConfig</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[303]"></a>RTC_GetAlarmSubSecond</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[304]"></a>RTC_WakeUpClockConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[305]"></a>RTC_SetWakeUpCounter</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[306]"></a>RTC_GetWakeUpCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[307]"></a>RTC_WakeUpCmd</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[308]"></a>RTC_DayLightSavingConfig</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[309]"></a>RTC_GetStoreOperation</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[30a]"></a>RTC_OutputConfig</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>RTC_CoarseCalibConfig</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>

<P><STRONG><a name="[d8]"></a>RTC_CoarseCalibCmd</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>

<P><STRONG><a name="[30b]"></a>RTC_CalibOutputCmd</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[30c]"></a>RTC_CalibOutputConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[30d]"></a>RTC_SmoothCalibConfig</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[30e]"></a>RTC_TimeStampCmd</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[d9]"></a>RTC_GetTimeStamp</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>

<P><STRONG><a name="[30f]"></a>RTC_GetTimeStampSubSecond</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[310]"></a>RTC_TamperTriggerConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[311]"></a>RTC_TamperCmd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[312]"></a>RTC_TamperFilterConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[313]"></a>RTC_TamperSamplingFreqConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[314]"></a>RTC_TamperPinsPrechargeDuration</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[315]"></a>RTC_TimeStampOnTamperDetectionCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[316]"></a>RTC_TamperPullUpCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[110]"></a>RTC_WriteBackupRegister</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeAndDate_Set
</UL>

<P><STRONG><a name="[10f]"></a>RTC_ReadBackupRegister</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeAndDate_Set
</UL>

<P><STRONG><a name="[317]"></a>RTC_TamperPinSelection</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[318]"></a>RTC_TimeStampPinSelection</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[319]"></a>RTC_OutputTypeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[da]"></a>RTC_SynchroShiftConfig</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f4xx_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
</UL>

<P><STRONG><a name="[31a]"></a>RTC_ITConfig</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[31b]"></a>RTC_GetFlagStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[31c]"></a>RTC_ClearFlag</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[31d]"></a>RTC_GetITStatus</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[31e]"></a>RTC_ClearITPendingBit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text), UNUSED)

<P><STRONG><a name="[db]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, stm32f4xx_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[126]"></a>SPI_Init</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, stm32f4xx_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
</UL>

<P><STRONG><a name="[31f]"></a>I2S_Init</STRONG> (Thumb, 226 bytes, Stack size 20 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[320]"></a>SPI_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[321]"></a>I2S_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[127]"></a>SPI_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
</UL>

<P><STRONG><a name="[322]"></a>I2S_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[323]"></a>SPI_DataSizeConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[324]"></a>SPI_BiDirectionalLineConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[325]"></a>SPI_NSSInternalSoftwareConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[326]"></a>SPI_SSOutputCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[327]"></a>SPI_TIModeCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[328]"></a>I2S_FullDuplexConfig</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[122]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendHalfWord
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>

<P><STRONG><a name="[120]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendHalfWord
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>

<P><STRONG><a name="[329]"></a>SPI_CalculateCRC</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[32a]"></a>SPI_TransmitCRC</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[32b]"></a>SPI_GetCRC</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[32c]"></a>SPI_GetCRCPolynomial</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[32d]"></a>SPI_I2S_DMACmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[32e]"></a>SPI_I2S_ITConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[11f]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendHalfWord
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>

<P><STRONG><a name="[32f]"></a>SPI_I2S_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[330]"></a>SPI_I2S_GetITStatus</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[331]"></a>SPI_I2S_ClearITPendingBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[dd]"></a>TIM_DeInit</STRONG> (Thumb, 284 bytes, Stack size 8 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[14d]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_PWM_Init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Key_TIM_Init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Init
</UL>

<P><STRONG><a name="[332]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[333]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[334]"></a>TIM_CounterModeConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[335]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[336]"></a>TIM_SetAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[337]"></a>TIM_GetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[338]"></a>TIM_GetPrescaler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[339]"></a>TIM_UpdateDisableConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[33a]"></a>TIM_UpdateRequestConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[15c]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_PWM_Init
</UL>

<P><STRONG><a name="[33b]"></a>TIM_SelectOnePulseMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[33c]"></a>TIM_SetClockDivision</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[153]"></a>TIM_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_PWM_Init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Key_TIM_Init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Init
</UL>

<P><STRONG><a name="[151]"></a>TIM_OC1Init</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_PWM_Init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Init
</UL>

<P><STRONG><a name="[33d]"></a>TIM_OC2Init</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[33e]"></a>TIM_OC3Init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[33f]"></a>TIM_OC4Init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[14e]"></a>TIM_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Init
</UL>

<P><STRONG><a name="[340]"></a>TIM_SelectOCxM</STRONG> (Thumb, 130 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_BACK_Task
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_START_Task
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step1_OFF
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step1_ON
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_OFF
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_ON
</UL>

<P><STRONG><a name="[156]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_OFF
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_ON
</UL>

<P><STRONG><a name="[157]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_OFF
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_ON
</UL>

<P><STRONG><a name="[155]"></a>TIM_SetCompare4</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_OFF
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Step_ON
</UL>

<P><STRONG><a name="[341]"></a>TIM_ForcedOC1Config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[342]"></a>TIM_ForcedOC2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[343]"></a>TIM_ForcedOC3Config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[344]"></a>TIM_ForcedOC4Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[152]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_PWM_Init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Init
</UL>

<P><STRONG><a name="[345]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[346]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[347]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[348]"></a>TIM_OC1FastConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[349]"></a>TIM_OC2FastConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[34a]"></a>TIM_OC3FastConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[34b]"></a>TIM_OC4FastConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[34c]"></a>TIM_ClearOC1Ref</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[34d]"></a>TIM_ClearOC2Ref</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[34e]"></a>TIM_ClearOC3Ref</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[34f]"></a>TIM_ClearOC4Ref</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[350]"></a>TIM_OC1PolarityConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[351]"></a>TIM_OC1NPolarityConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[352]"></a>TIM_OC2PolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[353]"></a>TIM_OC2NPolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[354]"></a>TIM_OC3PolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[355]"></a>TIM_OC3NPolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[356]"></a>TIM_OC4PolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[357]"></a>TIM_CCxCmd</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[358]"></a>TIM_CCxNCmd</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[e4]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[e3]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[e1]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[de]"></a>TIM_ICInit</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[359]"></a>TIM_ICStructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[e5]"></a>TIM_PWMIConfig</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[35a]"></a>TIM_GetCapture1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[35b]"></a>TIM_GetCapture2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[35c]"></a>TIM_GetCapture3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[35d]"></a>TIM_GetCapture4</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[35e]"></a>TIM_BDTRConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[35f]"></a>TIM_BDTRStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[360]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[361]"></a>TIM_SelectCOM</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[362]"></a>TIM_CCPreloadControl</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[150]"></a>TIM_ITConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Key_TIM_Init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Init
</UL>

<P><STRONG><a name="[363]"></a>TIM_GenerateEvent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[364]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[14f]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Init
</UL>

<P><STRONG><a name="[159]"></a>TIM_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[15a]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[365]"></a>TIM_DMAConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[366]"></a>TIM_DMACmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[367]"></a>TIM_SelectCCDMA</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[14c]"></a>TIM_InternalClockConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STEP_Init
</UL>

<P><STRONG><a name="[e7]"></a>TIM_SelectInputTrigger</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRxExternalClockConfig
</UL>

<P><STRONG><a name="[e6]"></a>TIM_ITRxExternalClockConfig</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
</UL>

<P><STRONG><a name="[e8]"></a>TIM_TIxExternalClockConfig</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[ea]"></a>TIM_ETRConfig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode2Config
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode1Config
</UL>

<P><STRONG><a name="[e9]"></a>TIM_ETRClockMode1Config</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[eb]"></a>TIM_ETRClockMode2Config</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[368]"></a>TIM_SelectOutputTrigger</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[369]"></a>TIM_SelectSlaveMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[36a]"></a>TIM_SelectMasterSlaveMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[36b]"></a>TIM_EncoderInterfaceConfig</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[36c]"></a>TIM_SelectHallSensor</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[36d]"></a>TIM_RemapConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>USART_DeInit</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[ed]"></a>USART_Init</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Uart_Config
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_USART_Config
</UL>

<P><STRONG><a name="[36e]"></a>USART_StructInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[36f]"></a>USART_ClockInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[370]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[f9]"></a>USART_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Uart_Config
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_USART_Config
</UL>

<P><STRONG><a name="[371]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[372]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[373]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[fb]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_printf
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Send_Char
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_SendByte
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendByte
</UL>

<P><STRONG><a name="[103]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[374]"></a>USART_SetAddress</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[375]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[376]"></a>USART_WakeUpConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[377]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[378]"></a>USART_LINCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[379]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[37a]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[37b]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[37c]"></a>USART_SmartCardCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[37d]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[37e]"></a>USART_IrDAConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[37f]"></a>USART_IrDACmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[380]"></a>USART_DMACmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>USART_ITConfig</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Uart_Config
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_USART_Config
</UL>

<P><STRONG><a name="[fc]"></a>USART_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_printf
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Send_Char
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_SendByte
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_SendCmd
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendByte
</UL>

<P><STRONG><a name="[381]"></a>USART_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[102]"></a>USART_GetITStatus</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[10d]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[f0]"></a>Delay_us</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_xms
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>

<P><STRONG><a name="[ef]"></a>Delay_ms</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_qrcode_update
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_qrcode_show_info
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_heartbeat
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_Init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_Heartbreat
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_SendCmd
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Scan
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_adjust_adjusting
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_takeegg_updateegg
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_error_showerror
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_error_showfull
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_error_takeegg
</UL>

<P><STRONG><a name="[f1]"></a>Delay_xms</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, delay.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>

<P><STRONG><a name="[b7]"></a>Usart1_Init</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, bsp_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Usart1_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fa]"></a>Usart_SendByte</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Usart_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_SendCmd
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[82]"></a>Usart1_Printf</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, bsp_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Usart1_Printf &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_BACK_Task
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_START_Task
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;De_this_egg_queue
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;De_this_goose_queue
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraverseQueue
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraTask
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowTask
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DatatestTask
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDinandoutTask
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TotalTask
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCardTask
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Flash_to_queue
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CLK_Config_Backup
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CLK_Config
</UL>

<P><STRONG><a name="[7a]"></a>fputc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bsp_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc &rArr; Usart_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[100]"></a>easyflash_delrecover</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, bsp_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = easyflash_delrecover &rArr; ef_del_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_del_env
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[35]"></a>USART1_IRQHandler</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, bsp_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = USART1_IRQHandler &rArr; easyflash_delrecover &rArr; ef_del_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_del_env
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easyflash_delrecover
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[107]"></a>RFID_SendCmd</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, rfid_r200.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RFID_SendCmd &rArr; Usart_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_Read
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_Heartbreat
</UL>

<P><STRONG><a name="[108]"></a>RFID_USART_Config</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, rfid_r200.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = RFID_USART_Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_Init
</UL>

<P><STRONG><a name="[be]"></a>RFID_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rfid_r200.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = RFID_Init &rArr; RFID_USART_Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_USART_Config
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[90]"></a>RFID_Read</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rfid_r200.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RFID_Read &rArr; RFID_SendCmd &rArr; Usart_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCardTask
</UL>

<P><STRONG><a name="[91]"></a>RFID_Heartbreat</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, rfid_r200.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RFID_Heartbreat &rArr; RFID_SendCmd &rArr; Usart_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_SendCmd
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCardTask
</UL>

<P><STRONG><a name="[10a]"></a>RFID_DataProcess</STRONG> (Thumb, 362 bytes, Stack size 32 bytes, rfid_r200.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RFID_DataProcess &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[10b]"></a>RFID_NeglectID</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, rfid_r200.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[10c]"></a>RFID_CleanIDBuf</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rfid_r200.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[36]"></a>USART2_IRQHandler</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, rfid_r200.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USART2_IRQHandler &rArr; RFID_DataProcess &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_DataProcess
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[10e]"></a>RTC_TimeAndDate_Set</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, bsp_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadBackupRegister
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteBackupRegister
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyRTC_Init
</UL>

<P><STRONG><a name="[111]"></a>MyRTC_SetTime</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, bsp_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
</UL>

<P><STRONG><a name="[112]"></a>RTC_CLK_Config</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, bsp_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Printf
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKCmd
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSEConfig
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyRTC_Init
</UL>

<P><STRONG><a name="[117]"></a>RTC_CLK_Config_Backup</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, bsp_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Printf
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKCmd
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSICmd
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSEConfig
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
</UL>

<P><STRONG><a name="[119]"></a>MyRTC_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CLK_Config
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeAndDate_Set
</UL>

<P><STRONG><a name="[11a]"></a>MyRTC_GetTimestamp</STRONG> (Thumb, 74 bytes, Stack size 56 bytes, bsp_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MyRTC_GetTimestamp &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_updatetime
</UL>

<P><STRONG><a name="[93]"></a>MyRTC_GetUnixTimestamp</STRONG> (Thumb, 72 bytes, Stack size 56 bytes, bsp_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MyRTC_GetUnixTimestamp &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_START_Task
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDinandoutTask
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TotalTask
</UL>

<P><STRONG><a name="[ad]"></a>MyRTC_GetTime</STRONG> (Thumb, 98 bytes, Stack size 64 bytes, bsp_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MyRTC_GetTime &rArr; RTC_GetDate
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraTask
</UL>

<P><STRONG><a name="[b3]"></a>Timestamp_Set_RTC_Time</STRONG> (Thumb, 206 bytes, Stack size 96 bytes, bsp_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = Timestamp_Set_RTC_Time &rArr; RTC_SetTime &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraTask
</UL>

<P><STRONG><a name="[a6]"></a>MyRTC_Lora_GetTime</STRONG> (Thumb, 92 bytes, Stack size 64 bytes, bsp_rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MyRTC_Lora_GetTime &rArr; RTC_GetDate
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraTask
</UL>

<P><STRONG><a name="[382]"></a>IWDG_Init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, iwdg.o(.text), UNUSED)

<P><STRONG><a name="[105]"></a>IWDG_Feed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[11e]"></a>SPI_FLASH_SendByte</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, spi_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TIMEOUT_UserCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_WAKEUP
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_PowerDown
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadByte
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_StartReadSequence
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadDeviceID
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferRead
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BulkErase
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorErase_NOS
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorErase
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadID
</UL>

<P><STRONG><a name="[123]"></a>SPI_FLASH_ReadID</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, spi_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPI_FLASH_ReadID &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
</UL>

<P><STRONG><a name="[125]"></a>SPI_FLASH_Init</STRONG> (Thumb, 212 bytes, Stack size 48 bytes, spi_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SPI_FLASH_Init &rArr; SPI_FLASH_ReadID &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_ReadID
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_init
</UL>

<P><STRONG><a name="[128]"></a>SPI_FLASH_WaitForWriteEnd</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, spi_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TIMEOUT_UserCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BulkErase
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorErase_NOS
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorErase
</UL>

<P><STRONG><a name="[129]"></a>SPI_FLASH_WriteEnable</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, spi_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPI_FLASH_WriteEnable &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BulkErase
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorErase_NOS
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorErase
</UL>

<P><STRONG><a name="[12a]"></a>SPI_FLASH_SectorErase</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, spi_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SPI_FLASH_SectorErase &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Egg_Queue_Reset
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Egg_Queue_Save
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Erase
</UL>

<P><STRONG><a name="[12b]"></a>SPI_FLASH_Erase</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, spi_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SPI_FLASH_Erase &rArr; SPI_FLASH_SectorErase &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorErase
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_erase
</UL>

<P><STRONG><a name="[12c]"></a>SPI_FLASH_SectorErase_NOS</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, spi_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>

<P><STRONG><a name="[12d]"></a>SPI_FLASH_BulkErase</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, spi_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>

<P><STRONG><a name="[12e]"></a>SPI_FLASH_PageWrite</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, spi_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WriteEnable
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferWrite
</UL>

<P><STRONG><a name="[12f]"></a>SPI_FLASH_BufferWrite</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, spi_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Egg_Queue_Save
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_write
</UL>

<P><STRONG><a name="[130]"></a>SPI_FLASH_BufferRead</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, spi_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPI_FLASH_BufferRead &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Egg_Queue_Exists
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Egg_Queue_Load
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_read
</UL>

<P><STRONG><a name="[131]"></a>SPI_FLASH_ReadDeviceID</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, spi_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>

<P><STRONG><a name="[132]"></a>SPI_FLASH_StartReadSequence</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, spi_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>

<P><STRONG><a name="[133]"></a>SPI_FLASH_ReadByte</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, spi_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>

<P><STRONG><a name="[134]"></a>SPI_FLASH_SendHalfWord</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, spi_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TIMEOUT_UserCallback
</UL>

<P><STRONG><a name="[135]"></a>SPI_Flash_PowerDown</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, spi_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>

<P><STRONG><a name="[136]"></a>SPI_Flash_WAKEUP</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, spi_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>

<P><STRONG><a name="[137]"></a>Egg_Queue_Clear</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, spi_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Egg_Queue_Clear &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Egg_Queue_Reset
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Egg_Queue_Load
</UL>

<P><STRONG><a name="[138]"></a>Egg_Queue_Load</STRONG> (Thumb, 120 bytes, Stack size 2840 bytes, spi_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2920<LI>Call Chain = Egg_Queue_Load &rArr; SPI_FLASH_BufferRead &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Egg_Queue_Clear
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferRead
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Egg_Queue_Init
</UL>

<P><STRONG><a name="[139]"></a>Egg_Queue_Exists</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, spi_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Egg_Queue_Exists &rArr; SPI_FLASH_BufferRead &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferRead
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Egg_Queue_Init
</UL>

<P><STRONG><a name="[c1]"></a>Egg_Queue_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, spi_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2928<LI>Call Chain = Egg_Queue_Init &rArr; Egg_Queue_Load &rArr; SPI_FLASH_BufferRead &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Egg_Queue_Exists
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Egg_Queue_Load
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13a]"></a>Egg_Queue_Save</STRONG> (Thumb, 120 bytes, Stack size 2840 bytes, spi_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2968<LI>Call Chain = Egg_Queue_Save &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferWrite
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorErase
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Egg_Queue_Reset
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Egg_Queue_Add
</UL>

<P><STRONG><a name="[95]"></a>Egg_Queue_Add</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, spi_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3000<LI>Call Chain = Egg_Queue_Add &rArr; Egg_Queue_Save &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Egg_Queue_Save
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDinandoutTask
</UL>

<P><STRONG><a name="[a3]"></a>Egg_Queue_Reset</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, spi_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2992<LI>Call Chain = Egg_Queue_Reset &rArr; Egg_Queue_Save &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Egg_Queue_Save
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Egg_Queue_Clear
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SectorErase
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowTask
</UL>

<P><STRONG><a name="[13b]"></a>Usart_lcd_SendByte</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usart_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>

<P><STRONG><a name="[13c]"></a>Usart_lcd_Printf_OS</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, usart_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Usart_lcd_Printf_OS &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_updatetime
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_qrcode_update
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_qrcode_show_info
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_heartbeat
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_showsignal
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_shownosignal
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_beep
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_adjust_success
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_adjust_adjusting
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_takeegg_updateegg
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_error_showerror
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_error_showfull
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_error_takeegg
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_switch
</UL>

<P><STRONG><a name="[13d]"></a>Usart_lcd_Printf</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, usart_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[13f]"></a>CRC16_MODBUS</STRONG> (Thumb, 128 bytes, Stack size 28 bytes, usart_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CRC16_MODBUS
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_qrcode_update
</UL>

<P><STRONG><a name="[13e]"></a>Usart_lcd_switch</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usart_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Usart_lcd_switch &rArr; Usart_lcd_Printf_OS &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_Printf_OS
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_qrcode_update
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_qrcode_show_info
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_noegg
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_working
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_adjust_success
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_adjust_adjusting
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_adjust_adjust
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_takeegg_updateegg
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_error_showerror
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_error_showfull
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_error_takeegg
</UL>

<P><STRONG><a name="[a0]"></a>Usart_lcd_qrcode_update</STRONG> (Thumb, 116 bytes, Stack size 224 bytes, usart_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = Usart_lcd_qrcode_update &rArr; Usart_lcd_switch &rArr; Usart_lcd_Printf_OS &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_switch
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16_MODBUS
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_Printf_OS
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowTask
</UL>

<P><STRONG><a name="[a1]"></a>Usart_lcd_qrcode_show_info</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usart_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Usart_lcd_qrcode_show_info &rArr; Usart_lcd_switch &rArr; Usart_lcd_Printf_OS &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_switch
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_Printf_OS
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowTask
</UL>

<P><STRONG><a name="[140]"></a>Usart_lcd_error_takeegg</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usart_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_switch
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_Printf_OS
</UL>

<P><STRONG><a name="[141]"></a>Usart_lcd_error_showfull</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usart_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_switch
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_Printf_OS
</UL>

<P><STRONG><a name="[142]"></a>Usart_lcd_error_showerror</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usart_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_switch
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_Printf_OS
</UL>

<P><STRONG><a name="[143]"></a>Usart_lcd_takeegg_updateegg</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usart_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_switch
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_Printf_OS
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>

<P><STRONG><a name="[144]"></a>Usart_lcd_adjust_adjust</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usart_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_switch
</UL>

<P><STRONG><a name="[145]"></a>Usart_lcd_adjust_adjusting</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usart_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_switch
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_Printf_OS
</UL>

<P><STRONG><a name="[146]"></a>Usart_lcd_adjust_success</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usart_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_switch
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_Printf_OS
</UL>

<P><STRONG><a name="[147]"></a>Usart_lcd_working</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usart_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_switch
</UL>

<P><STRONG><a name="[a2]"></a>Usart_lcd_noegg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usart_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Usart_lcd_noegg &rArr; Usart_lcd_switch &rArr; Usart_lcd_Printf_OS &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowTask
</UL>

<P><STRONG><a name="[148]"></a>Usart_lcd_beep</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usart_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_Printf_OS
</UL>

<P><STRONG><a name="[9b]"></a>Usart_lcd_updatetime</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, usart_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Usart_lcd_updatetime &rArr; Usart_lcd_Printf_OS &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_Printf_OS
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyRTC_GetTimestamp
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowTask
</UL>

<P><STRONG><a name="[149]"></a>Usart_lcd_shownosignal</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usart_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_Printf_OS
</UL>

<P><STRONG><a name="[14a]"></a>Usart_lcd_showsignal</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usart_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_Printf_OS
</UL>

<P><STRONG><a name="[9c]"></a>Usart_lcd_heartbeat</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, usart_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Usart_lcd_heartbeat &rArr; Usart_lcd_Printf_OS &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_Printf_OS
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowTask
</UL>

<P><STRONG><a name="[44]"></a>UART4_IRQHandler</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, usart_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART4_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[bf]"></a>Usart_lcd_Init</STRONG> (Thumb, 652 bytes, Stack size 48 bytes, usart_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Usart_lcd_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14b]"></a>STEP_Init</STRONG> (Thumb, 260 bytes, Stack size 64 bytes, step_motor.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_InternalClockConfig
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OCStructInit
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>

<P><STRONG><a name="[154]"></a>Step_ON</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, step_motor.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare4
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare3
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
</UL>

<P><STRONG><a name="[158]"></a>Step_OFF</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, step_motor.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare4
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare3
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
</UL>

<P><STRONG><a name="[1]"></a>Step1_ON</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, step_motor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Step1_ON
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> step_motor.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>Step1_OFF</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, step_motor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Step1_OFF
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> step_motor.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>Step1_Move</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, step_motor.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> step_motor.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>TIM2_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, step_motor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[15b]"></a>Stop_Key_TIM_Init</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, stop_key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Stop_Key_TIM_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Key_Init
</UL>

<P><STRONG><a name="[c0]"></a>Stop_Key_Init</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, stop_key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Stop_Key_Init &rArr; Stop_Key_TIM_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Key_TIM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2e]"></a>TIM4_IRQHandler</STRONG> (Thumb, 346 bytes, Stack size 32 bytes, stop_key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TIM4_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[bc]"></a>TIM4_PWM_Init</STRONG> (Thumb, 152 bytes, Stack size 72 bytes, duoji.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = TIM4_PWM_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bb]"></a>KEY_Init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = KEY_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15d]"></a>KEY_Scan</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, key.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
</UL>

<P><STRONG><a name="[9e]"></a>base64_convertegg</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, base64.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = base64_convertegg
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowTask
</UL>

<P><STRONG><a name="[9f]"></a>base64_encode</STRONG> (Thumb, 380 bytes, Stack size 304 bytes, base64.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = base64_encode &rArr; ef_get_int &rArr; ef_get_long &rArr; ef_get_env &rArr; ef_get_env_blob &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_int
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowTask
</UL>

<P><STRONG><a name="[161]"></a>Lora_Res_Config</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lora.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Lora_Res_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Init
</UL>

<P><STRONG><a name="[162]"></a>Lora_Uart_Config</STRONG> (Thumb, 186 bytes, Stack size 48 bytes, lora.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Lora_Uart_Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Init
</UL>

<P><STRONG><a name="[163]"></a>Lora_Send_Char</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lora.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Lora_Send_Char
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Send_buff
</UL>

<P><STRONG><a name="[164]"></a>Lora_Send_buff</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lora.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Lora_Send_buff &rArr; Lora_Send_Char
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Send_Char
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_SendCmd
</UL>

<P><STRONG><a name="[a9]"></a>Lora_Clear_Struct</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lora.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Lora_Clear_Struct
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraTask
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_SendCmd
</UL>

<P><STRONG><a name="[165]"></a>Lora_SendCmd</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lora.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Lora_SendCmd &rArr; Lora_Send_buff &rArr; Lora_Send_Char
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Clear_Struct
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Send_buff
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Wakeup
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_EnterAT
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_GetID
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_SetAT
</UL>

<P><STRONG><a name="[167]"></a>Lora_SetAT</STRONG> (Thumb, 274 bytes, Stack size 8 bytes, lora.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Lora_SetAT &rArr; Lora_SendCmd &rArr; Lora_Send_buff &rArr; Lora_Send_Char
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_SendCmd
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Init
</UL>

<P><STRONG><a name="[168]"></a>Lora_GetID</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lora.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Lora_GetID &rArr; Lora_SendCmd &rArr; Lora_Send_buff &rArr; Lora_Send_Char
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_SendCmd
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Init
</UL>

<P><STRONG><a name="[16b]"></a>Lora_EnterAT</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lora.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Lora_EnterAT &rArr; Lora_SendCmd &rArr; Lora_Send_buff &rArr; Lora_Send_Char
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Init
</UL>

<P><STRONG><a name="[16c]"></a>Lora_Wakeup</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lora.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Lora_Wakeup &rArr; Lora_SendCmd &rArr; Lora_Send_buff &rArr; Lora_Send_Char
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_SendCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Init
</UL>

<P><STRONG><a name="[b8]"></a>Lora_Init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, lora.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Lora_Init &rArr; Lora_Uart_Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_ms
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Wakeup
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_EnterAT
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_GetID
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_SetAT
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Uart_Config
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Res_Config
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[37]"></a>USART3_IRQHandler</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lora.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART3_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Clear_Struct
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[aa]"></a>Lora_printf</STRONG> (Thumb, 528 bytes, Stack size 40 bytes, lora.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Lora_printf &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraTask
</UL>

<P><STRONG><a name="[a5]"></a>Lora_CLear_Lora_buffer</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lora.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Lora_CLear_Lora_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraTask
</UL>

<P><STRONG><a name="[383]"></a>Lora_Write_takeegg_buffer</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lora.o(.text), UNUSED)

<P><STRONG><a name="[384]"></a>Lora_Read_takeegg_buffer</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lora.o(.text), UNUSED)

<P><STRONG><a name="[16f]"></a>Lora_Array_clear</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lora.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Buffer_Store_to_Flash
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Buffer_LastSend_to_Flash
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Buffer_Send_to_Flash
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Flash_to_queue
</UL>

<P><STRONG><a name="[170]"></a>Lora_Flash_to_queue</STRONG> (Thumb, 260 bytes, Stack size 904 bytes, lora.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Printf
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_env_blob
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Array_clear
</UL>

<P><STRONG><a name="[172]"></a>Lora_Buffer_Send_to_Flash</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, lora.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_env_blob
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Array_clear
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_del_env
</UL>

<P><STRONG><a name="[174]"></a>Lora_Buffer_LastSend_to_Flash</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, lora.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_env_blob
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Array_clear
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_del_env
</UL>

<P><STRONG><a name="[175]"></a>Lora_Buffer_Store_to_Flash</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, lora.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_env_blob
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Array_clear
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_del_env
</UL>

<P><STRONG><a name="[178]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[1c7]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[1a6]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>

<P><STRONG><a name="[1ab]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[1a5]"></a>uxListRemove</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
</UL>

<P><STRONG><a name="[176]"></a>xQueueGenericReset</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[ba]"></a>xQueueGenericCreate</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateSet
</UL>

<P><STRONG><a name="[9d]"></a>xQueueGenericSend</STRONG> (Thumb, 354 bytes, Stack size 56 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Printf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_printf
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraTask
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowTask
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Buffer_Store_to_Flash
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Buffer_LastSend_to_Flash
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Buffer_Send_to_Flash
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Flash_to_queue
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_Printf_OS
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_env_unlock
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCall
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[b9]"></a>xQueueCreateMutex</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[188]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetNumberOfTasks
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[18a]"></a>xQueueGiveFromISR</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetNumberOfTasks
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[a8]"></a>xQueueReceive</STRONG> (Thumb, 304 bytes, Stack size 56 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = xQueueReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraTask
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Buffer_Store_to_Flash
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Buffer_LastSend_to_Flash
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Buffer_Send_to_Flash
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSelectFromSet
</UL>

<P><STRONG><a name="[fd]"></a>xQueueSemaphoreTake</STRONG> (Thumb, 356 bytes, Stack size 48 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = xQueueSemaphoreTake &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Printf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_printf
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_Printf_OS
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_env_lock
</UL>

<P><STRONG><a name="[a4]"></a>xQueuePeek</STRONG> (Thumb, 296 bytes, Stack size 48 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = xQueuePeek &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraTask
</UL>

<P><STRONG><a name="[190]"></a>xQueueReceiveFromISR</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetNumberOfTasks
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSelectFromSetFromISR
</UL>

<P><STRONG><a name="[191]"></a>xQueuePeekFromISR</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[a7]"></a>uxQueueMessagesWaiting</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = uxQueueMessagesWaiting &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraTask
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Buffer_Store_to_Flash
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Buffer_LastSend_to_Flash
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Buffer_Send_to_Flash
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Flash_to_queue
</UL>

<P><STRONG><a name="[192]"></a>uxQueueSpacesAvailable</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[193]"></a>uxQueueMessagesWaitingFromISR</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[194]"></a>vQueueUnregisterQueue</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>

<P><STRONG><a name="[195]"></a>vQueueDelete</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueUnregisterQueue
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[197]"></a>xQueueIsQueueEmptyFromISR</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[198]"></a>xQueueIsQueueFullFromISR</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[199]"></a>vQueueAddToRegistry</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vQueueAddToRegistry &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[19a]"></a>pcQueueGetName</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[19b]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[19d]"></a>xQueueCreateSet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[19e]"></a>xQueueAddToSet</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[19f]"></a>xQueueRemoveFromSet</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[1a0]"></a>xQueueSelectFromSet</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[1a1]"></a>xQueueSelectFromSetFromISR</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
</UL>

<P><STRONG><a name="[b6]"></a>xTaskCreate</STRONG> (Thumb, 92 bytes, Stack size 56 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCreate
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[1a4]"></a>vTaskDelete</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[1a9]"></a>xTaskIncrementTick</STRONG> (Thumb, 298 bytes, Stack size 24 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[186]"></a>xTaskResumeAll</STRONG> (Thumb, 338 bytes, Stack size 24 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetHeapStats
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCatchUpTicks
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskDelayUntil
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[184]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetHeapStats
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCatchUpTicks
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskDelayUntil
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[1ac]"></a>xTaskDelayUntil</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[92]"></a>vTaskDelay</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_BACK_Task
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_START_Task
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraTask
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowTask
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DatatestTask
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDinandoutTask
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TotalTask
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCardTask
</UL>

<P><STRONG><a name="[1ad]"></a>eTaskGetState</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[1ae]"></a>uxTaskPriorityGet</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[1af]"></a>uxTaskPriorityGetFromISR</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[1b0]"></a>vTaskPrioritySet</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[7f]"></a>vTaskSwitchContext</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; Usart1_Printf &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
</UL>

<P><STRONG><a name="[1b1]"></a>vTaskSuspend</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[1b3]"></a>vTaskResume</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskIsTaskSuspended
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[1b4]"></a>xTaskResumeFromISR</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskIsTaskSuspended
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[c2]"></a>vTaskStartScheduler</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b7]"></a>vTaskEndScheduler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEndScheduler
</UL>

<P><STRONG><a name="[98]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_BACK_Task
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_START_Task
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[1b9]"></a>xTaskGetTickCountFromISR</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[17f]"></a>uxTaskGetNumberOfTasks</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
</UL>

<P><STRONG><a name="[1ba]"></a>pcTaskGetName</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[1bb]"></a>xTaskCatchUpTicks</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[187]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[1bc]"></a>vTaskPlaceOnUnorderedEventList</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[19c]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[17a]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
</UL>

<P><STRONG><a name="[1bd]"></a>vTaskRemoveFromUnorderedEventList</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[1be]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[183]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
</UL>

<P><STRONG><a name="[185]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xTaskCheckForTimeOut &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[181]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[385]"></a>xTaskGetCurrentTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)

<P><STRONG><a name="[182]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[18e]"></a>xTaskPriorityInherit</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[17d]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[18f]"></a>vTaskPriorityDisinheritAfterTimeout</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vTaskPriorityDisinheritAfterTimeout &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[386]"></a>uxTaskResetEventItemValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)

<P><STRONG><a name="[18d]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[1bf]"></a>ulTaskGenericNotifyTake</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[1c0]"></a>xTaskGenericNotifyWait</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[1c1]"></a>xTaskGenericNotify</STRONG> (Thumb, 318 bytes, Stack size 32 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[1c2]"></a>xTaskGenericNotifyFromISR</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[1c3]"></a>vTaskGenericNotifyGiveFromISR</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[1c4]"></a>xTaskGenericNotifyStateClear</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[1c5]"></a>ulTaskGenericNotifyValueClear</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[1b5]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[1d0]"></a>xTimerCreate</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[1d1]"></a>xTimerGenericCommand</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[1d2]"></a>xTimerGetTimerDaemonTaskHandle</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[1d3]"></a>xTimerGetPeriod</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[1d4]"></a>vTimerSetReloadMode</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[1d5]"></a>xTimerGetReloadMode</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTimerGetReloadMode
</UL>

<P><STRONG><a name="[1d6]"></a>uxTimerGetReloadMode</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGetReloadMode
</UL>

<P><STRONG><a name="[1d7]"></a>xTimerGetExpiryTime</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[1d8]"></a>pcTimerGetName</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[1d9]"></a>xTimerIsTimerActive</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[1da]"></a>pvTimerGetTimerID</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[1db]"></a>vTimerSetTimerID</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[1dc]"></a>xTimerPendFunctionCallFromISR</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[1dd]"></a>xTimerPendFunctionCall</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[1c8]"></a>pxPortInitialiseStack</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[1de]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[1b6]"></a>xPortStartScheduler</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xPortStartScheduler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[1b8]"></a>vPortEndScheduler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, port.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskEndScheduler
</UL>

<P><STRONG><a name="[177]"></a>vPortEnterCritical</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vPortEnterCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetHeapStats
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTimerSetTimerID
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTimerGetTimerID
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGetReloadMode
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTimerSetReloadMode
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskGenericNotifyValueClear
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskGenericNotifyTake
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCatchUpTicks
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGet
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyWait
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyStateClear
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueRemoveFromSet
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueAddToSet
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueSpacesAvailable
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[179]"></a>vPortExitCritical</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetHeapStats
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTimerSetTimerID
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTimerGetTimerID
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGetReloadMode
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTimerSetReloadMode
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskGenericNotifyValueClear
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskGenericNotifyTake
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCatchUpTicks
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGet
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyWait
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyStateClear
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueRemoveFromSet
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueAddToSet
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueSpacesAvailable
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[f]"></a>SysTick_Handler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[189]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, port.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetIPSR
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGenericNotifyGiveFromISR
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGetFromISR
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeekFromISR
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[17b]"></a>pvPortMalloc</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, heap_4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortCalloc
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
</UL>

<P><STRONG><a name="[196]"></a>vPortFree</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, heap_4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>

<P><STRONG><a name="[387]"></a>xPortGetFreeHeapSize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, heap_4.o(.text), UNUSED)

<P><STRONG><a name="[388]"></a>xPortGetMinimumEverFreeHeapSize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, heap_4.o(.text), UNUSED)

<P><STRONG><a name="[389]"></a>vPortInitialiseBlocks</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heap_4.o(.text), UNUSED)

<P><STRONG><a name="[1e3]"></a>pvPortCalloc</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, heap_4.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1e4]"></a>vPortGetHeapStats</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, heap_4.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[1e5]"></a>ef_types_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ef_types.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s2j_init
</UL>

<P><STRONG><a name="[1e7]"></a>ef_get_bool</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ef_types.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_info
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_env
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[1ea]"></a>ef_get_long</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ef_types.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = ef_get_long &rArr; ef_get_env &rArr; ef_get_env_blob &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_info
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_env
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_int
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_short
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_char
</UL>

<P><STRONG><a name="[1ec]"></a>ef_get_char</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ef_types.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_long
</UL>

<P><STRONG><a name="[1ed]"></a>ef_get_short</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ef_types.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_long
</UL>

<P><STRONG><a name="[15e]"></a>ef_get_int</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ef_types.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = ef_get_int &rArr; ef_get_long &rArr; ef_get_env &rArr; ef_get_env_blob &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_long
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64_encode
</UL>

<P><STRONG><a name="[1ee]"></a>ef_get_double</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ef_types.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_info
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_env
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_float
</UL>

<P><STRONG><a name="[1f0]"></a>ef_get_float</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ef_types.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_double
</UL>

<P><STRONG><a name="[1f7]"></a>ef_get_bool_array</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ef_types.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_array
</UL>

<P><STRONG><a name="[1f8]"></a>ef_get_char_array</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ef_types.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_array
</UL>

<P><STRONG><a name="[1f9]"></a>ef_get_short_array</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ef_types.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_array
</UL>

<P><STRONG><a name="[1fa]"></a>ef_get_int_array</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ef_types.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_array
</UL>

<P><STRONG><a name="[1fb]"></a>ef_get_long_array</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ef_types.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_array
</UL>

<P><STRONG><a name="[1fc]"></a>ef_get_float_array</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ef_types.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_array
</UL>

<P><STRONG><a name="[1fd]"></a>ef_get_double_array</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ef_types.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_array
</UL>

<P><STRONG><a name="[1fe]"></a>ef_get_string_array</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ef_types.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_array
</UL>

<P><STRONG><a name="[1ff]"></a>egg_set_cb</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, ef_types.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateArray
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToObject
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToArray
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>

<P><STRONG><a name="[206]"></a>egg_get_cb</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, ef_types.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetArraySize
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetArrayItem
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[208]"></a>ef_get_struct</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ef_types.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_env
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Parse
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
</UL>

<P><STRONG><a name="[209]"></a>ef_set_bool</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ef_types.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_env
</UL>

<P><STRONG><a name="[20b]"></a>ef_set_long</STRONG> (Thumb, 40 bytes, Stack size 40 bytes, ef_types.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = ef_set_long &rArr; ef_set_env &rArr; ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_env
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_int
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_short
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_char
</UL>

<P><STRONG><a name="[20d]"></a>ef_set_char</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ef_types.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_long
</UL>

<P><STRONG><a name="[20e]"></a>ef_set_short</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ef_types.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_long
</UL>

<P><STRONG><a name="[b2]"></a>ef_set_int</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ef_types.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = ef_set_int &rArr; ef_set_long &rArr; ef_set_env &rArr; ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_long
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraTask
</UL>

<P><STRONG><a name="[20f]"></a>ef_set_double</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, ef_types.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_env
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_float
</UL>

<P><STRONG><a name="[210]"></a>ef_set_float</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ef_types.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_double
</UL>

<P><STRONG><a name="[217]"></a>ef_set_bool_array</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ef_types.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_array
</UL>

<P><STRONG><a name="[218]"></a>ef_set_char_array</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ef_types.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_array
</UL>

<P><STRONG><a name="[219]"></a>ef_set_short_array</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ef_types.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_array
</UL>

<P><STRONG><a name="[21a]"></a>ef_set_int_array</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ef_types.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_array
</UL>

<P><STRONG><a name="[21b]"></a>ef_set_long_array</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ef_types.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_array
</UL>

<P><STRONG><a name="[21c]"></a>ef_set_float_array</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ef_types.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_array
</UL>

<P><STRONG><a name="[21d]"></a>ef_set_double_array</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ef_types.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_array
</UL>

<P><STRONG><a name="[21e]"></a>ef_set_string_array</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ef_types.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_array
</UL>

<P><STRONG><a name="[21f]"></a>ef_set_struct</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ef_types.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_env
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_PrintUnformatted
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
</UL>

<P><STRONG><a name="[38a]"></a>cJSON_GetErrorPtr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cjson.o(.text), UNUSED)

<P><STRONG><a name="[256]"></a>cJSON_InitHooks</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s2j_init
</UL>

<P><STRONG><a name="[1f6]"></a>cJSON_Delete</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Duplicate
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ReplaceItemInArray
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_DeleteItemFromObject
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_DeleteItemFromArray
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_struct
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_struct
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_array
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_array
</UL>

<P><STRONG><a name="[239]"></a>cJSON_ParseWithOpts</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Parse
</UL>

<P><STRONG><a name="[1f3]"></a>cJSON_Parse</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_struct
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_array
</UL>

<P><STRONG><a name="[240]"></a>cJSON_Print</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
</UL>

<P><STRONG><a name="[214]"></a>cJSON_PrintUnformatted</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_struct
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_array
</UL>

<P><STRONG><a name="[241]"></a>cJSON_PrintBuffered</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
</UL>

<P><STRONG><a name="[1f4]"></a>cJSON_GetArraySize</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;egg_get_cb
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_array
</UL>

<P><STRONG><a name="[1f5]"></a>cJSON_GetArrayItem</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;egg_get_cb
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_array
</UL>

<P><STRONG><a name="[207]"></a>cJSON_GetObjectItem</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strcasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;egg_get_cb
</UL>

<P><STRONG><a name="[242]"></a>cJSON_HasObjectItem</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strcasecmp
</UL>

<P><STRONG><a name="[204]"></a>cJSON_AddItemToArray</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_InsertItemInArray
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemReferenceToArray
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToObjectCS
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToObject
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;egg_set_cb
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_array
</UL>

<P><STRONG><a name="[205]"></a>cJSON_AddItemToObject</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strdup
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToArray
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemReferenceToObject
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;egg_set_cb
</UL>

<P><STRONG><a name="[244]"></a>cJSON_AddItemToObjectCS</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToArray
</UL>

<P><STRONG><a name="[245]"></a>cJSON_AddItemReferenceToArray</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_reference
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToArray
</UL>

<P><STRONG><a name="[246]"></a>cJSON_AddItemReferenceToObject</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_reference
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToObject
</UL>

<P><STRONG><a name="[248]"></a>cJSON_DetachItemFromArray</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_DetachItemFromObject
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_DeleteItemFromArray
</UL>

<P><STRONG><a name="[247]"></a>cJSON_DeleteItemFromArray</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_DetachItemFromArray
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
</UL>

<P><STRONG><a name="[249]"></a>cJSON_DetachItemFromObject</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_DetachItemFromArray
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strcasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_DeleteItemFromObject
</UL>

<P><STRONG><a name="[24a]"></a>cJSON_DeleteItemFromObject</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_DetachItemFromObject
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
</UL>

<P><STRONG><a name="[24b]"></a>cJSON_InsertItemInArray</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToArray
</UL>

<P><STRONG><a name="[24c]"></a>cJSON_ReplaceItemInArray</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ReplaceItemInObject
</UL>

<P><STRONG><a name="[24d]"></a>cJSON_ReplaceItemInObject</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ReplaceItemInArray
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strdup
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strcasecmp
</UL>

<P><STRONG><a name="[24e]"></a>cJSON_CreateNull</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>

<P><STRONG><a name="[24f]"></a>cJSON_CreateTrue</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>

<P><STRONG><a name="[250]"></a>cJSON_CreateFalse</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>

<P><STRONG><a name="[213]"></a>cJSON_CreateBool</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_array
</UL>

<P><STRONG><a name="[203]"></a>cJSON_CreateNumber</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateDoubleArray
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateFloatArray
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateIntArray
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;egg_set_cb
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_array
</UL>

<P><STRONG><a name="[216]"></a>cJSON_CreateString</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strdup
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateStringArray
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_array
</UL>

<P><STRONG><a name="[201]"></a>cJSON_CreateArray</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateStringArray
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateDoubleArray
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateFloatArray
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateIntArray
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;egg_set_cb
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_array
</UL>

<P><STRONG><a name="[200]"></a>cJSON_CreateObject</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;egg_set_cb
</UL>

<P><STRONG><a name="[251]"></a>cJSON_CreateIntArray</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateArray
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[252]"></a>cJSON_CreateFloatArray</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateArray
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>

<P><STRONG><a name="[253]"></a>cJSON_CreateDoubleArray</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateArray
</UL>

<P><STRONG><a name="[254]"></a>cJSON_CreateStringArray</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateArray
</UL>

<P><STRONG><a name="[255]"></a>cJSON_Duplicate</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Duplicate
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strdup
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Duplicate
</UL>

<P><STRONG><a name="[38b]"></a>cJSON_Minify</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, cjson.o(.text), UNUSED)

<P><STRONG><a name="[1e6]"></a>s2j_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, s2j.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_InitHooks
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_types_init
</UL>

<P><STRONG><a name="[257]"></a>ef_port_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ef_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ef_port_init &rArr; SPI_FLASH_Init &rArr; SPI_FLASH_ReadID &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easyflash_init
</UL>

<P><STRONG><a name="[258]"></a>ef_port_read</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ef_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ef_port_read &rArr; SPI_FLASH_BufferRead &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferRead
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_env_blob
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_next_env_addr
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_env_from_cache
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_env_cb
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_env
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_meta_data
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_env
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_read_env_value
</UL>

<P><STRONG><a name="[259]"></a>ef_port_erase</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ef_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ef_port_erase &rArr; SPI_FLASH_Erase &rArr; SPI_FLASH_SectorErase &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
</UL>

<P><STRONG><a name="[25a]"></a>ef_port_write</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ef_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ef_port_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_BufferWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_env_blob
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_write
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_status
</UL>

<P><STRONG><a name="[25b]"></a>ef_port_env_lock</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ef_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ef_port_env_lock &rArr; xQueueSemaphoreTake &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_env_blob
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_env_blob
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_del_env
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_load_env
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_print_env
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_env_set_default
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_read_env_value
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_env_obj
</UL>

<P><STRONG><a name="[25c]"></a>ef_port_env_unlock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ef_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ef_port_env_unlock &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_env_blob
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_env_blob
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_del_env
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_load_env
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_print_env
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_env_set_default
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_read_env_value
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_env_obj
</UL>

<P><STRONG><a name="[38c]"></a>ef_log_debug</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ef_port.o(.text), UNUSED)

<P><STRONG><a name="[25d]"></a>ef_print</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, ef_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ef_print &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_env_cb
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_info
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_print_env
</UL>

<P><STRONG><a name="[1e9]"></a>ef_log_info</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, ef_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ef_log_info &rArr; ef_print &rArr; vsprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_print
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easyflash_init
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_env_blob
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_env_blob
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_del_env
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_recovery_env_cb
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sec_hdr_cb
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_env_blob
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_meta_data
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_env
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_double
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_long
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_bool
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_array
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_array
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_load_env
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_print_env
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_read_env_value
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_env_obj
</UL>

<P><STRONG><a name="[bd]"></a>easyflash_init</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, easyflash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = easyflash_init &rArr; ef_env_init &rArr; ef_load_env &rArr; ef_env_set_default &rArr; create_env_blob &rArr; new_env &rArr; gc_collect &rArr; sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_env_init
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_init
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_info
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[26f]"></a>ef_get_env_obj</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ef_env.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_env_unlock
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_env_lock
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_info
</UL>

<P><STRONG><a name="[171]"></a>ef_get_env_blob</STRONG> (Thumb, 92 bytes, Stack size 80 bytes, ef_env.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = ef_get_env_blob &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_env_unlock
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_env_lock
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_read
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_info
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Flash_to_queue
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_env
</UL>

<P><STRONG><a name="[1e8]"></a>ef_get_env</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ef_env.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = ef_get_env &rArr; ef_get_env_blob &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_env_blob
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_is_str
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_info
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_struct
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_double
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_long
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_bool
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_array
</UL>

<P><STRONG><a name="[271]"></a>ef_read_env_value</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ef_env.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_env_unlock
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_env_lock
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_read
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_info
</UL>

<P><STRONG><a name="[101]"></a>ef_del_env</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ef_env.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = ef_del_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_env
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_env_unlock
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_env_lock
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_info
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Buffer_Store_to_Flash
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Buffer_LastSend_to_Flash
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Buffer_Send_to_Flash
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easyflash_delrecover
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_del_and_save_env
</UL>

<P><STRONG><a name="[27c]"></a>ef_del_and_save_env</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ef_env.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_del_env
</UL>

<P><STRONG><a name="[173]"></a>ef_set_env_blob</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ef_env.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_env_unlock
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_env_lock
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_info
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_env
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Buffer_Store_to_Flash
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Buffer_LastSend_to_Flash
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Buffer_Send_to_Flash
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_env
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_and_save_env
</UL>

<P><STRONG><a name="[20a]"></a>ef_set_env</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ef_env.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = ef_set_env &rArr; ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_env_blob
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_struct
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_double
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_long
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_bool
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_array
</UL>

<P><STRONG><a name="[27e]"></a>ef_set_and_save_env</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ef_env.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_env_blob
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[38d]"></a>ef_save_env</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ef_env.o(.text), UNUSED)

<P><STRONG><a name="[27f]"></a>ef_env_set_default</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, ef_env.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = ef_env_set_default &rArr; create_env_blob &rArr; new_env &rArr; gc_collect &rArr; sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_env_blob
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_env_unlock
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_env_lock
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_load_env
</UL>

<P><STRONG><a name="[280]"></a>ef_print_env</STRONG> (Thumb, 68 bytes, Stack size 64 bytes, ef_env.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_iterator
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_print
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_env_unlock
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_env_lock
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_info
</UL>

<P><STRONG><a name="[281]"></a>ef_load_env</STRONG> (Thumb, 106 bytes, Stack size 112 bytes, ef_env.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = ef_load_env &rArr; ef_env_set_default &rArr; create_env_blob &rArr; new_env &rArr; gc_collect &rArr; sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_collect
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sector_iterator
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_iterator
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_env_unlock
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_env_lock
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_info
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_env_set_default
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_env_init
</UL>

<P><STRONG><a name="[25e]"></a>ef_env_init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ef_env.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = ef_env_init &rArr; ef_load_env &rArr; ef_env_set_default &rArr; create_env_blob &rArr; new_env &rArr; gc_collect &rArr; sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_load_env
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;easyflash_init
</UL>

<P><STRONG><a name="[262]"></a>ef_calc_crc32</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ef_utils.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ef_calc_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_env_from_cache
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_env_blob
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_env
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_env_cache
</UL>

<P><STRONG><a name="[221]"></a>tolower</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tolower.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strcasecmp
</UL>

<P><STRONG><a name="[ab]"></a>localtime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, localtime_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = localtime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_updatetime
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraTask
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_takeegg_updateegg
</UL>

<P><STRONG><a name="[282]"></a>_localtime</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, localtime_r.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>

<P><STRONG><a name="[11d]"></a>localtime_r</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, localtime_r.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = localtime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timestamp_Set_RTC_Time
</UL>

<P><STRONG><a name="[11b]"></a>mktime</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyRTC_GetUnixTimestamp
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyRTC_GetTimestamp
</UL>

<P><STRONG><a name="[ac]"></a>strftime</STRONG> (Thumb, 580 bytes, Stack size 72 bytes, strftime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = strftime &rArr; _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_isoweek
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraTask
</UL>

<P><STRONG><a name="[160]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64_encode
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strdup
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_array
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_object
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensure
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[11c]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyRTC_Lora_GetTime
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyRTC_GetTime
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Egg_Queue_Add
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Egg_Queue_Save
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Egg_Queue_Load
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_reference
</UL>

<P><STRONG><a name="[38e]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[1c6]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_env_blob
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_write
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_status
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[38f]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[390]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[106]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64_encode
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_CLear_Lora_buffer
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_Printf
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_Printf_OS
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortCalloc
</UL>

<P><STRONG><a name="[94]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_qrcode_update
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Clear_Struct
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_CLear_Lora_buffer
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraTask
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowTask
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDinandoutTask
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Array_clear
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_SetAT
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Egg_Queue_Clear
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_CleanIDBuf
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_NeglectID
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_DataProcess
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_array
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_object
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_double
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_long
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;egg_get_cb
</UL>

<P><STRONG><a name="[391]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[285]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[16a]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_GetID
</UL>

<P><STRONG><a name="[ae]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraTask
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_SendCmd
</UL>

<P><STRONG><a name="[b0]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraTask
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_GetID
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
</UL>

<P><STRONG><a name="[af]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraTask
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string_ptr
</UL>

<P><STRONG><a name="[ff]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_qrcode_update
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Printf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_printf
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_SendCmd
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_Printf
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_Printf_OS
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_env_blob
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_env
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env_cb
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strdup
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_array
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_object
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_env
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_env_set_default
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_and_save_env
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_env
</UL>

<P><STRONG><a name="[166]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_SendCmd
</UL>

<P><STRONG><a name="[8f]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGooseInQueue
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDinandoutTask
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TotalTask
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCardTask
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_NeglectID
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_DataProcess
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[169]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_GetID
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_array
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_object
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string_ptr
</UL>

<P><STRONG><a name="[237]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_env_from_cache
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env_cb
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[15f]"></a>strtoul</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64_encode
</UL>

<P><STRONG><a name="[b1]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraTask
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_bool
</UL>

<P><STRONG><a name="[1eb]"></a>atol</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atol &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_long
</UL>

<P><STRONG><a name="[224]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
</UL>

<P><STRONG><a name="[225]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[28e]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
</UL>

<P><STRONG><a name="[223]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
</UL>

<P><STRONG><a name="[215]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateIntArray
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_array
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[202]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;egg_set_cb
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_array
</UL>

<P><STRONG><a name="[227]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
</UL>

<P><STRONG><a name="[211]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateFloatArray
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_float
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_array
</UL>

<P><STRONG><a name="[22a]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>

<P><STRONG><a name="[22c]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>

<P><STRONG><a name="[22d]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
</UL>

<P><STRONG><a name="[1f1]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_float
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_array
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[392]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[2b1]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[291]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[28a]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[393]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[28f]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[394]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[28b]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[395]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[287]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[79]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[288]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[295]"></a>__strtod_int</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, strtod.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>

<P><STRONG><a name="[289]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[396]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[290]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[397]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[28d]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[28c]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>

<P><STRONG><a name="[296]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>

<P><STRONG><a name="[2ad]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[398]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[297]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7e]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[399]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[292]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[294]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[29b]"></a>_scanf_really_real</STRONG> (Thumb, 556 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[77]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[78]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[29d]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[29a]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[39a]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[39b]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[29e]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[39c]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[104]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64_encode
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_heartbeat
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_Init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_Heartbreat
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Egg_Queue_Reset
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Egg_Queue_Init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Egg_Queue_Add
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_SendCmd
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_switch
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Egg_Queue_Save
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Egg_Queue_Load
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Egg_Queue_Clear
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_PageWrite
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_Init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TIMEOUT_UserCallback
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TimeAndDate_Set
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_DataProcess
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_print
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_info
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskExitError
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCall
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTimerSetTimerID
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTimerGetTimerID
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcTimerGetName
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGetExpiryTime
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGetReloadMode
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTimerSetReloadMode
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGetPeriod
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGetTimerDaemonTaskHandle
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEndScheduler
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGenericNotifyGiveFromISR
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskGenericNotifyTake
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCatchUpTicks
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcTaskGetName
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskDelayUntil
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskIsTaskSuspended
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyWait
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyStateClear
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcQueueGetName
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueIsQueueFullFromISR
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueIsQueueEmptyFromISR
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueUnregisterQueue
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaitingFromISR
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueSpacesAvailable
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeekFromISR
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[39d]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[39e]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[2a0]"></a>__0snprintf</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[39f]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[20c]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_double
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_long
</UL>

<P><STRONG><a name="[3a0]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[3a1]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[2a1]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3a2]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[b4]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_qrcode_update
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraTask
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string_ptr
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>

<P><STRONG><a name="[3a3]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[3a4]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[2a2]"></a>__0vsprintf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3a5]"></a>__1vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[3a6]"></a>__2vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[3a7]"></a>__c89vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[fe]"></a>vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Printf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_printf
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_Printf
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_Printf_OS
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_print
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_info
</UL>

<P><STRONG><a name="[22e]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[286]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[3a8]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[1ef]"></a>__hardfp_atof</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, atof.o(i.__hardfp_atof), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_double
</UL>

<P><STRONG><a name="[22b]"></a>__hardfp_fabs</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fabs.o(i.__hardfp_fabs), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>

<P><STRONG><a name="[22f]"></a>__hardfp_floor</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, floor.o(i.__hardfp_floor), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>

<P><STRONG><a name="[226]"></a>__hardfp_pow</STRONG> (Thumb, 3072 bytes, Stack size 192 bytes, pow.o(i.__hardfp_pow), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
</UL>

<P><STRONG><a name="[2ac]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[2a6]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[2a5]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[2aa]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[2a7]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[2ab]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[2a3]"></a>__read_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__read_errno), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>

<P><STRONG><a name="[3a9]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[3aa]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[3ab]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[2a4]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[29c]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[2a9]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[5]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;De_this_egg_queue
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;De_egg_queue
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TraverseQueue
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;De_goose_queue
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraTask
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowTask
</UL>
<BR>[Address Reference Count : 4]<UL><LI> cjson.o(.data)
<LI> s2j.o(.text)
<LI> s2j.o(.data)
<LI> cjson.o(.text)
</UL>
<P><STRONG><a name="[4]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADD_egg_queue
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_egg_queue
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADD_goose_queue
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_goose_queue
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraTask
</UL>
<BR>[Address Reference Count : 4]<UL><LI> cjson.o(.data)
<LI> s2j.o(.text)
<LI> s2j.o(.data)
<LI> cjson.o(.text)
</UL>
<P><STRONG><a name="[2a8]"></a>sqrt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sqrt.o(i.sqrt), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[80]"></a>SetSysClock</STRONG> (Thumb, 162 bytes, Stack size 12 bytes, system_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[65]"></a>ReadCardTask</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ReadCardTask &rArr; Usart1_Printf &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Printf
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_Read
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_Heartbreat
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[66]"></a>TotalTask</STRONG> (Thumb, 226 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = TotalTask &rArr; Usart1_Printf &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Printf
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyRTC_GetUnixTimestamp
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsGooseInQueue
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADD_goose_queue
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[67]"></a>IDinandoutTask</STRONG> (Thumb, 586 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3032<LI>Call Chain = IDinandoutTask &rArr; Egg_Queue_Add &rArr; Egg_Queue_Save &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Printf
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyRTC_GetUnixTimestamp
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Egg_Queue_Add
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADD_egg_queue
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;De_this_goose_queue
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEmpty
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[68]"></a>DatatestTask</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = DatatestTask &rArr; Usart1_Printf &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Printf
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEggQueueEmpty
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEmpty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[69]"></a>ShowTask</STRONG> (Thumb, 344 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2992<LI>Call Chain = ShowTask &rArr; Egg_Queue_Reset &rArr; Egg_Queue_Save &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64_encode
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;base64_convertegg
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_updatetime
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_qrcode_update
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_qrcode_show_info
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_noegg
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_lcd_heartbeat
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Printf
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Egg_Queue_Reset
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsEggQueueEmpty
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[6a]"></a>LoraTask</STRONG> (Thumb, 2884 bytes, Stack size 464 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = LoraTask &rArr; ef_set_int &rArr; ef_set_long &rArr; ef_set_env &rArr; ef_set_env_blob &rArr; set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_int
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart1_Printf
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timestamp_Set_RTC_Time
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyRTC_Lora_GetTime
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyRTC_GetTime
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_printf
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_Clear_Struct
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lora_CLear_Lora_buffer
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strftime
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[d1]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
</UL>

<P><STRONG><a name="[d0]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTimeStamp
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetAlarm
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
</UL>

<P><STRONG><a name="[e2]"></a>TI2_Config</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[e0]"></a>TI1_Config</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[121]"></a>SPI_TIMEOUT_UserCallback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, spi_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendHalfWord
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_WaitForWriteEnd
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_FLASH_SendByte
</UL>

<P><STRONG><a name="[17c]"></a>prvCopyDataToQueue</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
</UL>

<P><STRONG><a name="[17e]"></a>prvNotifyQueueSetContainer</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetNumberOfTasks
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[180]"></a>prvUnlockQueue</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[18b]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeekFromISR
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
</UL>

<P><STRONG><a name="[18c]"></a>prvIsQueueEmpty</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvIsQueueEmpty &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[1a2]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvAddNewTaskToReadyList &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[1aa]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskGenericNotifyTake
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskDelayUntil
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyWait
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
</UL>

<P><STRONG><a name="[1b2]"></a>prvTaskIsTaskSuspended</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
</UL>

<P><STRONG><a name="[6b]"></a>prvIdleTask</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = prvIdleTask &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.text)
</UL>
<P><STRONG><a name="[1a3]"></a>prvInitialiseNewTask</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvInitialiseNewTask &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[1a8]"></a>prvDeleteTCB</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[1a7]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[1c9]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReloadTimer
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[1ca]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = prvProcessExpiredTimer &rArr; prvReloadTimer &rArr; prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReloadTimer
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[1cc]"></a>prvSampleTimeNow</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = prvSampleTimeNow &rArr; prvProcessExpiredTimer &rArr; prvReloadTimer &rArr; prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[1cd]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = prvProcessReceivedCommands &rArr; xQueueReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReloadTimer
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[6c]"></a>prvTimerTask</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; xQueueReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(.text)
</UL>
<P><STRONG><a name="[1cf]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[1cb]"></a>prvReloadTimer</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = prvReloadTimer &rArr; prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[1ce]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; vQueueWaitForMessageRestricted &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[6d]"></a>prvTaskExitError</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvTaskExitError &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text)
</UL>
<P><STRONG><a name="[1e2]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, heap_4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[1e1]"></a>prvHeapInit</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, heap_4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[1f2]"></a>ef_get_array</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, ef_types.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_info
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_env
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Parse
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetArraySize
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetArrayItem
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_string_array
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_double_array
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_float_array
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_long_array
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_int_array
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_short_array
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_char_array
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_bool_array
</UL>

<P><STRONG><a name="[212]"></a>ef_set_array</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, ef_types.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_env
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_info
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_PrintUnformatted
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Delete
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateBool
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateArray
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToArray
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_string_array
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_double_array
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_float_array
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_long_array
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_int_array
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_short_array
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_char_array
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_bool_array
</UL>

<P><STRONG><a name="[220]"></a>cJSON_strcasecmp</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ReplaceItemInObject
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_DetachItemFromObject
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_HasObjectItem
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_GetObjectItem
</UL>

<P><STRONG><a name="[222]"></a>parse_number</STRONG> (Thumb, 370 bytes, Stack size 72 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[228]"></a>ensure</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_array
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_object
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string_ptr
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>

<P><STRONG><a name="[229]"></a>print_number</STRONG> (Thumb, 534 bytes, Stack size 40 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensure
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
</UL>

<P><STRONG><a name="[231]"></a>parse_hex4</STRONG> (Thumb, 166 bytes, Stack size 0 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_string
</UL>

<P><STRONG><a name="[230]"></a>parse_string</STRONG> (Thumb, 374 bytes, Stack size 32 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_hex4
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
</UL>

<P><STRONG><a name="[232]"></a>print_string_ptr</STRONG> (Thumb, 348 bytes, Stack size 40 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensure
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_object
</UL>

<P><STRONG><a name="[233]"></a>parse_object</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_string
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[236]"></a>parse_value</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_string
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_number
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
</UL>

<P><STRONG><a name="[23a]"></a>print_object</STRONG> (Thumb, 914 bytes, Stack size 88 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string_ptr
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensure
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
</UL>

<P><STRONG><a name="[23d]"></a>print_array</STRONG> (Thumb, 452 bytes, Stack size 56 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensure
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
</UL>

<P><STRONG><a name="[23c]"></a>print_value</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_strdup
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_array
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_object
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ensure
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_PrintBuffered
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Print
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_array
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_object
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_PrintUnformatted
</UL>

<P><STRONG><a name="[243]"></a>create_reference</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemReferenceToObject
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemReferenceToArray
</UL>

<P><STRONG><a name="[23e]"></a>cJSON_strdup</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Duplicate
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ReplaceItemInObject
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_AddItemToObject
</UL>

<P><STRONG><a name="[235]"></a>cJSON_New_Item</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_Duplicate
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateFalse
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateTrue
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNull
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_reference
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateString
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateObject
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateNumber
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateBool
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_CreateArray
</UL>

<P><STRONG><a name="[23b]"></a>update</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_array
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_object
</UL>

<P><STRONG><a name="[23f]"></a>print_string</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_string_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_value
</UL>

<P><STRONG><a name="[234]"></a>skip</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_ParseWithOpts
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_array
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_object
</UL>

<P><STRONG><a name="[238]"></a>parse_array</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, cjson.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cJSON_New_Item
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_value
</UL>

<P><STRONG><a name="[25f]"></a>set_status</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ef_env.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = set_status
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_status
</UL>

<P><STRONG><a name="[260]"></a>write_status</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ef_env.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = write_status &rArr; ef_port_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_status
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_write
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_recovery_env_cb
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_env_blob
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gc
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_env
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sec_status
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_env
</UL>

<P><STRONG><a name="[269]"></a>update_sector_cache</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ef_env.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = update_sector_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_env_blob
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sec_status
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_meta_data
</UL>

<P><STRONG><a name="[261]"></a>update_env_cache</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, ef_env.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = update_env_cache &rArr; ef_calc_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_calc_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_env_blob
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_env
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env
</UL>

<P><STRONG><a name="[263]"></a>get_next_env_addr</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ef_env.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = get_next_env_addr &rArr; find_next_env_addr &rArr; ef_port_read &rArr; SPI_FLASH_BufferRead &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_next_env_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gc
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_iterator
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_meta_data
</UL>

<P><STRONG><a name="[265]"></a>read_env</STRONG> (Thumb, 222 bytes, Stack size 88 bytes, ef_env.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = read_env &rArr; write_status &rArr; ef_port_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_status
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_status
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_read
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_calc_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gc
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_iterator
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_meta_data
</UL>

<P><STRONG><a name="[267]"></a>read_sector_meta_data</STRONG> (Thumb, 344 bytes, Stack size 176 bytes, ef_env.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sector_from_cache
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_status
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_env
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_env_addr
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sector_cache
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_read
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_info
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sector_iterator
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_iterator
</UL>

<P><STRONG><a name="[26b]"></a>get_next_sector_addr</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ef_env.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sector_iterator
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_iterator
</UL>

<P><STRONG><a name="[26a]"></a>env_iterator</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, ef_env.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_sector_addr
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_meta_data
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_env
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_env_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env_no_cache
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_load_env
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_print_env
</UL>

<P><STRONG><a name="[76]"></a>find_env_cb</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ef_env.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = find_env_cb &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ef_env.o(.text)
</UL>
<P><STRONG><a name="[26c]"></a>find_env</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ef_env.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env_no_cache
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_env_from_cache
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_env
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_env_cache
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_env_blob
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_env
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_env_obj
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_env
</UL>

<P><STRONG><a name="[272]"></a>format_sector</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, ef_env.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = format_sector &rArr; ef_port_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sector_cache
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_status
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_write
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_erase
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sec_hdr_cb
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gc
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_env_set_default
</UL>

<P><STRONG><a name="[273]"></a>update_sec_status</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, ef_env.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = update_sec_status &rArr; write_status &rArr; ef_port_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sector_cache
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_status
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_env_blob
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
</UL>

<P><STRONG><a name="[274]"></a>sector_iterator</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, ef_env.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_sector_addr
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_meta_data
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_collect
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_env
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_load_env
</UL>

<P><STRONG><a name="[6e]"></a>sector_statistics_cb</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ef_env.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ef_env.o(.text)
</UL>
<P><STRONG><a name="[6f]"></a>alloc_env_cb</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ef_env.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ef_env.o(.text)
</UL>
<P><STRONG><a name="[275]"></a>alloc_env</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, ef_env.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = alloc_env &rArr; sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sector_iterator
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_env
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
</UL>

<P><STRONG><a name="[276]"></a>del_env</STRONG> (Thumb, 166 bytes, Stack size 96 bytes, ef_env.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_status
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_env_cache
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_status
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_read
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_del_env
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_env
</UL>

<P><STRONG><a name="[277]"></a>move_env</STRONG> (Thumb, 338 bytes, Stack size 176 bytes, ef_env.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = move_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env_no_cache
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_env
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_env
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sec_status
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_env_cache
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sector_cache
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_status
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_write
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_read
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_recovery_env_cb
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gc
</UL>

<P><STRONG><a name="[71]"></a>do_gc</STRONG> (Thumb, 100 bytes, Stack size 72 bytes, ef_env.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = do_gc &rArr; move_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_env
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_env_addr
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ef_env.o(.text)
</UL>
<P><STRONG><a name="[70]"></a>gc_check_cb</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ef_env.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ef_env.o(.text)
</UL>
<P><STRONG><a name="[278]"></a>gc_collect</STRONG> (Thumb, 58 bytes, Stack size 48 bytes, ef_env.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = gc_collect &rArr; sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sector_iterator
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_env
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_and_recovery_gc_cb
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_load_env
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_env
</UL>

<P><STRONG><a name="[279]"></a>align_write</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, ef_env.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = align_write &rArr; ef_port_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_write
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_env_blob
</UL>

<P><STRONG><a name="[27a]"></a>create_env_blob</STRONG> (Thumb, 302 bytes, Stack size 56 bytes, ef_env.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = create_env_blob &rArr; new_env &rArr; gc_collect &rArr; sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_env
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_write
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sec_status
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_env_cache
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_sector_cache
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_status
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_write
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_info
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_calc_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_env_set_default
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_env
</UL>

<P><STRONG><a name="[72]"></a>print_env_cb</STRONG> (Thumb, 154 bytes, Stack size 56 bytes, ef_env.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = print_env_cb &rArr; ef_port_read &rArr; SPI_FLASH_BufferRead &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_is_str
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_print
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ef_env.o(.text)
</UL>
<P><STRONG><a name="[73]"></a>check_sec_hdr_cb</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ef_env.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = check_sec_hdr_cb &rArr; format_sector &rArr; ef_port_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_sector
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ef_env.o(.text)
</UL>
<P><STRONG><a name="[74]"></a>check_and_recovery_gc_cb</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ef_env.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = check_and_recovery_gc_cb &rArr; gc_collect &rArr; sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_collect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ef_env.o(.text)
</UL>
<P><STRONG><a name="[75]"></a>check_and_recovery_env_cb</STRONG> (Thumb, 294 bytes, Stack size 16 bytes, ef_env.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = check_and_recovery_env_cb &rArr; move_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_status
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_log_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ef_env.o(.text)
</UL>
<P><STRONG><a name="[266]"></a>get_status</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ef_env.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_status
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_env
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_meta_data
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_env
</UL>

<P><STRONG><a name="[268]"></a>get_sector_from_cache</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ef_env.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_sector_from_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_next_env_addr
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector_meta_data
</UL>

<P><STRONG><a name="[26d]"></a>get_env_from_cache</STRONG> (Thumb, 120 bytes, Stack size 64 bytes, ef_env.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = get_env_from_cache &rArr; ef_port_read &rArr; SPI_FLASH_BufferRead &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_read
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_calc_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env
</UL>

<P><STRONG><a name="[264]"></a>find_next_env_addr</STRONG> (Thumb, 126 bytes, Stack size 64 bytes, ef_env.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = find_next_env_addr &rArr; ef_port_read &rArr; SPI_FLASH_BufferRead &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sector_from_cache
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_port_read
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_env_addr
</UL>

<P><STRONG><a name="[26e]"></a>find_env_no_cache</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ef_env.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;env_iterator
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_env
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env
</UL>

<P><STRONG><a name="[270]"></a>ef_is_str</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ef_env.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_env_cb
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_get_env
</UL>

<P><STRONG><a name="[27b]"></a>new_env</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ef_env.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = new_env &rArr; gc_collect &rArr; sector_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_collect
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_env
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_env_blob
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_env
</UL>

<P><STRONG><a name="[27d]"></a>set_env</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, ef_env.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = set_env &rArr; del_env &rArr; find_env &rArr; find_env_no_cache &rArr; env_iterator &rArr; read_sector_meta_data &rArr; read_env &rArr; write_status &rArr; ef_port_write &rArr; SPI_FLASH_BufferWrite &rArr; SPI_FLASH_PageWrite &rArr; SPI_FLASH_WaitForWriteEnd &rArr; SPI_FLASH_SendByte &rArr; SPI_TIMEOUT_UserCallback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_env
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_env_blob
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_collect
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;del_env
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_env
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ef_set_env_blob
</UL>

<P><STRONG><a name="[283]"></a>_isoweek</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, strftime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _isoweek
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_yeardays
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strftime
</UL>

<P><STRONG><a name="[284]"></a>_yeardays</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, strftime.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_isoweek
</UL>

<P><STRONG><a name="[2ae]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[29f]"></a>_printf_core</STRONG> (Thumb, 1704 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[2b0]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2af]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[7b]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0snprintf)
</UL>
<P><STRONG><a name="[7c]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0sprintf)
<LI> printfa.o(i.__0vsprintf)
</UL>
<P><STRONG><a name="[293]"></a>_local_sscanf</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, strtod.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[299]"></a>_fp_value</STRONG> (Thumb, 296 bytes, Stack size 64 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
